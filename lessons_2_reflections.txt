
1) What happens when you initialize a repository? Why do you need to do it?

When a repository is initialized with the 'git init' command, the repository is
placed under version control (using Git). It is a required as it lets Git know
that we want to track files in that repository.

2) How is the staging area different from the working directory and the
repository? What value do you think it offers?

The staging area only contains those files from the working directory and the
repository that have been added using the 'git add' command. The staging area
keeps track of changes in these files since the last commit. On using the commit
option, these changes are applied to the repository.

3) How can you use the staging area to make sure you have one commit per logical
change?

We can do this by first adding the selected changed files in the working
directory to the staging area. And then, prior to using the 'git commit'
command, we can run the 'git diff --staged' command to see what changes are
going to be committed.

4) What are some situations when branches would be helpful in keeping your
history organized? How would branches help?

Branches are useful when we want to have a different version of the main
repository e.g. when adding a new experimental feature. This way we can work on
the master branch and other branches simultaneously. Additionally, we can merge
these branches back into master (or with one another) providing greater
flexibility.

5) How do the diagrams help you visualize the branch structure?

The diagrams created with the 'git --graph' command show where the branches fork
and merge hence giving a clear picture of the branch structure. They also make
it easy to see which commits are reachable and from which branches.

6) What is the result of merging two branches together? Why do we represent it
in the diagram the way we do?

The (non-conflicting) changes introduced in two branches relative to their
common parent are merged into a single new commit.  We show the new commit as
being the child of two parents(the commits that were merged together) by making
use of arrows to illustrate the relationship between them and also, make it
clear that the two branches have been merged.

7) What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

Automatic merging takes care of non-conflicting changes easily when compared to
doing it manually(a tedious task). However, conflicts during a merge are better
resolved manually. Git's merging strategy incorporates the best of both
practices. 
